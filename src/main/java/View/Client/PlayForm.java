/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.Client;

import Controller.ListenServer;
import Controller.inReceiveMessage;
import Model.Game;
import Model.Message;
import Model.Question;
import static View.Client.LoginForm.user;
import java.io.IOException;
import java.time.LocalTime;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author tamng
 */
public class PlayForm extends javax.swing.JFrame implements inReceiveMessage {

    static ListenServer listenServer = null;
    DefaultListModel<String> model = new DefaultListModel<>();
    ArrayList<Question> questions;
    static Game game;// game send to Server
    static Game game2;// game receive from Server
    static int index = 0, count = 0;

    public PlayForm(ListenServer listenServer) {
        initComponents();
        setLocationRelativeTo(null);
        this.listenServer = listenServer;
        this.listenServer.receive = this;
        questions = new ArrayList<>();

        try {
            listenServer.SendMessage(40, null);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelCountCorrect = new javax.swing.JLabel();
        labelQuestionIndex = new javax.swing.JLabel();
        labelA = new javax.swing.JLabel();
        labelB = new javax.swing.JLabel();
        labelC = new javax.swing.JLabel();
        labelD = new javax.swing.JLabel();
        btnA = new javax.swing.JButton();
        btnB = new javax.swing.JButton();
        btnC = new javax.swing.JButton();
        btnD = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        questionTextPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelCountCorrect.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        labelCountCorrect.setText("Số câu đúng: 0");

        labelQuestionIndex.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        labelQuestionIndex.setText("Câu số 0");

        labelA.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelA.setText("jLabel3");

        labelB.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelB.setText("jLabel4");

        labelC.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelC.setText("jLabel5");

        labelD.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelD.setText("jLabel6");

        btnA.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnA.setText("A");
        btnA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAActionPerformed(evt);
            }
        });

        btnB.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnB.setText("B");
        btnB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBActionPerformed(evt);
            }
        });

        btnC.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnC.setText("C");
        btnC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCActionPerformed(evt);
            }
        });

        btnD.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnD.setText("D");
        btnD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDActionPerformed(evt);
            }
        });

        questionTextPane.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jScrollPane2.setViewportView(questionTextPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnA)
                        .addGap(18, 18, 18)
                        .addComponent(labelA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnC)
                        .addGap(18, 18, 18)
                        .addComponent(labelC, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnB)
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelD, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(labelB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnD))
                .addContainerGap(47, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(labelCountCorrect, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136)
                .addComponent(labelQuestionIndex)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCountCorrect)
                    .addComponent(labelQuestionIndex))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelD, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnD)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelA, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnA)
                            .addComponent(btnB)
                            .addComponent(labelB, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelC, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnC))))
                .addGap(127, 127, 127))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDActionPerformed
        // if correct answer is D, +1 correct answer
        if (questions.get(index).getCorrectAnswer() == 4) {
            count++;
        }
        index++;
        if (index < 5) { // if answer <=5
            setQuestion(questions.get(index));  //move to next answer
        } else {
            LocalTime time = java.time.LocalTime.now(); // get Time
            result(count, time); // get Result
        }
    }//GEN-LAST:event_btnDActionPerformed

    private void btnCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCActionPerformed

        if (questions.get(index).getCorrectAnswer() == 3) {
            count++;
        }
        index++;
        if (index < 5) {
            setQuestion(questions.get(index));
        } else {
            LocalTime time = java.time.LocalTime.now();
            result(count, time);
        }
    }//GEN-LAST:event_btnCActionPerformed

    private void btnBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBActionPerformed

        if (questions.get(index).getCorrectAnswer() == 2) {
            count++;
        }
        index++;
        if (index < 5) {
            setQuestion(questions.get(index));
        } else {
            LocalTime time = java.time.LocalTime.now();
            result(count, time);
        }
    }//GEN-LAST:event_btnBActionPerformed

    private void btnAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAActionPerformed

        if (questions.get(index).getCorrectAnswer() == 1) {
            count++;
        }
        index++;
        if (index < 5) {
            setQuestion(questions.get(index));
        } else {
            LocalTime time = java.time.LocalTime.now();
            result(count, time);
        }
    }//GEN-LAST:event_btnAActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayForm(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnA;
    private javax.swing.JButton btnB;
    private javax.swing.JButton btnC;
    private javax.swing.JButton btnD;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelA;
    private javax.swing.JLabel labelB;
    private javax.swing.JLabel labelC;
    private javax.swing.JLabel labelCountCorrect;
    private javax.swing.JLabel labelD;
    private javax.swing.JLabel labelQuestionIndex;
    private javax.swing.JTextPane questionTextPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void ReceiveMessage(Message msg) throws IOException {
        switch (msg.getType()) {
            // receive request "Is ready to play ?"
            case 41: {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(this, "Sẵn sàng chơi?", "Title on Box", dialogButton);
                if (dialogResult == 0) {
                    listenServer.SendMessage(44, null);// ready
                } else {
                    listenServer.SendMessage(45, null);// no ready
                }
                break;
            }

            // if ready, receive question from SerVer
            case 46: {
                questions = msg.getQuestions();
                setQuestion(questions.get(index));
                break;
            }
            // player don't want to play
            case 47: {
                JOptionPane.showMessageDialog(null, "Người chơi không đồng ý!", "Message", 1);
                break;
            }

            //Notify result of game is Tie
            case 60: {
                game2 = (Game) msg.getObject();
                String s = "Hòa";
                JOptionPane.showMessageDialog(null, "Hòa!", "Message", 1);
                this.setVisible(false);
                ResultForm resultForm = new ResultForm(listenServer, game2, s);
                resultForm.setVisible(true);
                break;
            }
            // Notify result of game is Win
            case 61: {
                game2 = (Game) msg.getObject();
                String s = "Thắng";
                JOptionPane.showMessageDialog(null, "Thắng!", "Message", 1);
                this.setVisible(false);
                ResultForm resultForm = new ResultForm(listenServer, game2, s);
                resultForm.setVisible(true);
                break;
            }

            // Notify result of game is Lose
            case 62: {
                game2 = (Game) msg.getObject();
                String s = "Thua";
                JOptionPane.showMessageDialog(null, "Thua!", "Message", 1);
                this.setVisible(false);
                ResultForm resultForm = new ResultForm(listenServer, game2, s);
                resultForm.setVisible(true);
                break;
            }

            // Notify that "competitor out"
            case 71: {
                JOptionPane.showMessageDialog(rootPane, "Đối thủ đã thoát khỏi phòng!");
                this.setVisible(false);
                HomeForm homeForm = new HomeForm(listenServer);
                homeForm.setVisible(true);
                break;
            }

            //Notify that "competitor haven't finshed"
            case 100: {
                JOptionPane.showMessageDialog(rootPane, "Đối thủ chưa hoàn thành trận đấu!");
                break;
            }
            default:

        }
    }

    private void setQuestion(Question q) {
        labelCountCorrect.setText("Số câu đúng: " + count);
        labelQuestionIndex.setText("Câu số: " + (index + 1));
        questionTextPane.setText(q.getQuestion());
        labelA.setText(q.getAnswerA());
        labelB.setText(q.getAnswerB());
        labelC.setText(q.getAnswerC());
        labelD.setText(q.getAnswerD());
    }

    //End game and send Result to Server
    private void result(int count, LocalTime time) {
        labelCountCorrect.setText("Số câu đúng: " + count);
        game = new Game(count, time, user);
        try {
            listenServer.SendMessage(50, game);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
}
